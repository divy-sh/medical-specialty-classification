# -*- coding: utf-8 -*-
"""ClinicalBERT2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lsv_o-m85xmiD4HoSQoitro1PlmHpjL6
"""

import torch
import pandas as pd
import numpy as np
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import classification_report
from transformers import AutoTokenizer, AutoModel
from tqdm import tqdm

# Download NLTK resources
nltk.download('stopwords')
nltk.download('wordnet')

# Load dataset
file_path = "/content/mtsamples.csv"
df = pd.read_csv(file_path)
df.dropna(subset=['transcription', 'medical_specialty', 'sample_name'], inplace=True)

# Filter out medical specialties with fewer than 30 samples
specialty_counts = df['medical_specialty'].value_counts()
valid_specialties = specialty_counts[specialty_counts >= 30].index
df = df[df['medical_specialty'].isin(valid_specialties)]

# Initialize stopwords and lemmatizer
stop_words = set(stopwords.words('english'))
lemmatizer = WordNetLemmatizer()

# Text preprocessing function
def clean_text(text):
    text = text.lower()
    text = re.sub(r'[^a-zA-Z0-9\s]', '', text)
    text = ' '.join([lemmatizer.lemmatize(word) for word in text.split() if word not in stop_words])
    return text

# Apply text cleaning
df['cleaned_transcription'] = df['transcription'].apply(clean_text)
df['cleaned_sample_name'] = df['sample_name'].apply(clean_text)
df['combined_text'] = df['cleaned_transcription'] + " " + df['cleaned_sample_name']

# Encode labels
label_encoder = LabelEncoder()
df['label'] = label_encoder.fit_transform(df['medical_specialty'])

# Load ClinicalBERT model and tokenizer
model_name = "emilyalsentzer/Bio_ClinicalBERT"
tokenizer = AutoTokenizer.from_pretrained(model_name)
bert_model = AutoModel.from_pretrained(model_name)
bert_model.eval()

# Batch BERT embedding generation
def get_bert_embeddings(texts, batch_size=16):
    embeddings = []
    for i in tqdm(range(0, len(texts), batch_size)):
        batch_texts = texts[i:i+batch_size]
        inputs = tokenizer(batch_texts, return_tensors="pt", truncation=True, padding=True, max_length=512)
        with torch.no_grad():
            outputs = bert_model(**inputs)
        batch_embeddings = outputs.last_hidden_state.mean(dim=1).cpu().numpy()
        embeddings.extend(batch_embeddings)
    return np.array(embeddings)

# Generate embeddings
X = get_bert_embeddings(df['combined_text'].tolist())
y = df['label'].values

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

# Train MLP classifier
model = MLPClassifier(hidden_layer_sizes=(512, 256), activation='relu', solver='adam', max_iter=10, random_state=42)
model.fit(X_train, y_train)

# Evaluate
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred, target_names=label_encoder.classes_))