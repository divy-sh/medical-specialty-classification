# -*- coding: utf-8 -*-
"""spacy_matching.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10SiMqcfb0vMS5fxwUPMT1ITFig1Y8FSl
"""

!pip install --no-cache-dir spacy==3.7.5 scispacy==0.5.4 negspacy

!pip install --no-cache-dir https://s3-us-west-2.amazonaws.com/ai2-s2-scispacy/releases/v0.5.4/en_core_sci_sm-0.5.4.tar.gz

!pip install negspacy

import spacy
from negspacy.negation import Negex

nlp = spacy.load("en_core_sci_sm")
nlp.add_pipe("negex")  # ‚Üê don't pass config here

print(nlp.pipe_names)

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

# Load the second dataset (disease-symptom-patient profile)
disease_df = pd.read_csv("/content/drive/MyDrive/Disease_symptom_and_patient_profile_dataset.csv")

# Preview a few rows
disease_df.head()

# Load transcription dataset from your Drive
mtsamples_df = pd.read_csv("/content/drive/MyDrive/mtsamples.csv")

# Preview it
mtsamples_df[['transcription']].head()

# Metadata columns we'll ignore (these are not symptoms)
metadata_cols = ['Disease', 'Age', 'Gender', 'Blood Pressure', 'Cholesterol Level', 'Outcome Variable']

# All other columns are symptoms
symptom_columns = [col for col in disease_df.columns if col not in metadata_cols]

print("Symptom columns:\n", symptom_columns)

# You can expand this dictionary further
symptom_synonyms = {
    "Fever": ["fever", "febrile", "temperature", "high temperature"],
    "Cough": ["cough", "coughing"],
    "Fatigue": ["fatigue", "tired", "exhausted", "lethargic", "worn out"],
    "Difficulty Breathing": ["shortness of breath", "difficulty breathing", "breathlessness", "dyspnea"]
}

# Only keep symptom columns that have mappings
filtered_symptoms = [s for s in symptom_columns if s in symptom_synonyms]
print("Filtered symptom list:", filtered_symptoms)

from tqdm import tqdm
tqdm.pandas()  # enables progress bar

# Function to extract symptom presence using NER + negation
# def extract_symptoms(text, symptoms):
#     doc = nlp(text.lower())  # convert to lowercase for better matching
#     found = {}

#     for sym in symptoms:
#         found[sym] = None  # Default: symptom not mentioned
#         for ent in doc.ents:
#             if sym.lower() in ent.text.lower():
#                 found[sym] = "No" if ent._.negex else "Yes"
#                 break  # if found once, no need to check more
#     return pd.Series(found)



def extract_symptoms(text, symptoms):
    if not isinstance(text, str):
        return pd.Series({sym: None for sym in symptoms})

    text = text.lower()
    doc = nlp(text)
    found = {}

    for sym in symptoms:
        found[sym] = None
        synonyms = symptom_synonyms.get(sym, [])

        for phrase in synonyms:
            if phrase in text:
                # Try to match phrase with an entity span
                matched = False
                for ent in doc.ents:
                    if phrase in ent.text.lower():
                        found[sym] = "No" if ent._.negex else "Yes"
                        matched = True
                        break
                if not matched:
                    found[sym] = "Yes"  # fallback if negex didn't trigger
                break  # if one synonym matched, stop checking more
    return pd.Series(found)

# Apply the function to the first 100 rows (change to full df later)
subset_df = mtsamples_df[['transcription']].head(100).copy()
subset_df = subset_df.dropna(subset=['transcription'])
symptom_results = subset_df['transcription'].progress_apply(lambda x: extract_symptoms(x, symptom_columns))

# Merge original transcriptions and extracted symptom presence
final_df = pd.concat([subset_df, symptom_results], axis=1)

# Display first few rows
final_df.head(30)











