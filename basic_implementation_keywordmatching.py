# -*- coding: utf-8 -*-
"""basic_implemetation_matching.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FkfVo8LpuJywu3B-SDdacPfwOm-GZ19C
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import re

# Adjust file paths according to your folder structure in Drive.
mtsamples_path = '/content/drive/MyDrive/mtsamples.csv'
disease_path = '/content/drive/MyDrive/Disease_symptom_and_patient_profile_dataset.csv'

# Load the datasets
mtsamples_df = pd.read_csv(mtsamples_path)
disease_df = pd.read_csv(disease_path)

# Check the columns in each DataFrame
print("Columns in mtsamples_df:", mtsamples_df.columns.tolist())
print("Columns in disease_df:", disease_df.columns.tolist())

# Peek at the first few rows to ensure data loaded correctly
print("mtsamples_df sample:\n", mtsamples_df.head(), "\n")
print("disease_df sample:\n", disease_df.head())

# Symptom columns from disease_df: 'Fever', 'Cough', 'Fatigue', 'Difficulty Breathing'
symptom_synonyms = {
    "Fever": [
        "fever",
        "febrile",
        "pyrexia",
        "temperature of"    # Expand as needed
    ],
    "Cough": [
        "cough",
        "coughing",
        "dry cough",
        "productive cough"
    ],
    "Fatigue": [
        "fatigue",
        "fatigued",
        "tired",
        "lethargic",
        "exhausted"
    ],
    "Difficulty Breathing": [
        "shortness of breath",
        "dyspnea",
        "sob",
        "labored breathing",
        "difficulty breathing",
        "respiratory distress"
    ]
}

# Basic negation indicators (look for these words near a symptom to mark it absent)
negation_triggers = [
    "no",
    "denies",
    "deny",
    "negative for",
    "without"
]

def detect_symptoms(text, symptom_dict, neg_triggers):
    """
    Identifies whether each symptom (Fever, Cough, Fatigue, Difficulty Breathing)
    is present (1) or absent (0) in the text.

    - text: the medical transcription (string).
    - symptom_dict: dict of { "Fever": [...synonyms...], ... }.
    - neg_triggers: list of negation words (["no","denies",...]).

    Returns a dict like {"Fever": 1, "Cough": 0, "Fatigue": 1, "Difficulty Breathing": 0}.
    """
    # Convert text to lowercase for case-insensitive matching
    text_lower = text.lower()

    # Start with 0 for each symptom
    results = {symptom: 0 for symptom in symptom_dict}

    # For each symptom (e.g., Fever), check synonyms
    for symptom, synonyms in symptom_dict.items():
        symptom_found = False

        for syn in synonyms:
            # Regex to match the synonym as a separate word or phrase
            pattern = r"\b" + re.escape(syn.lower()) + r"\b"
            match = re.search(pattern, text_lower)

            if match:
                # If we found the synonym, check for negation in the local window around the match
                start_idx = max(match.start() - 15, 0)
                end_idx = min(match.end() + 15, len(text_lower))
                context_window = text_lower[start_idx:end_idx]

                # Look for negation words in this small window
                negated = False
                for neg_word in neg_triggers:
                    if neg_word in context_window:
                        negated = True
                        break

                # If not negated, mark symptom_found and break from synonyms loop
                if not negated:
                    symptom_found = True
                    break

        # If any synonym was found (without negation), mark as 1
        if symptom_found:
            results[symptom] = 1

    return results


def parse_age(text):
    """
    Extracts a numeric age from text if it matches patterns like:
      - "45-year-old"
      - "45 years old"
    Returns an integer or None if not found.
    """
    text_lower = text.lower()

    # e.g. "45-year-old"
    match_1 = re.search(r"(\d{1,3})-year-old", text_lower)
    if match_1:
        return int(match_1.group(1))

    # e.g. "45 years old"
    match_2 = re.search(r"(\d{1,3})\s+years?\s+old", text_lower)
    if match_2:
        return int(match_2.group(1))

    return None


def parse_gender(text):
    """
    Simple detection of gender by looking for the words 'male' or 'female'.
    Returns 'M', 'F', or None if not found.
    """
    text_lower = text.lower()

    if re.search(r"\bmale\b", text_lower):
        return 'M'
    if re.search(r"\bfemale\b", text_lower):
        return 'F'

    return None


def parse_blood_pressure(text):
    """
    Attempts to find a pattern like '120/80' in the text.
    Returns the string '120/80' if found, else None.
    """
    text_lower = text.lower()

    match = re.search(r"(\d{2,3}/\d{2,3})", text_lower)
    if match:
        return match.group(1)
    return None


def parse_cholesterol(text):
    """
    Looks for a mention of cholesterol followed by a number, e.g. 'cholesterol of 200'.
    Returns the integer if found, else None.
    """
    text_lower = text.lower()
    match = re.search(r"cholesterol.*?(\d{2,4})", text_lower)
    if match:
        return int(match.group(1))
    return None

# Let's assume the transcription text is in a column named 'transcription' in mtsamples_df.
# Change 'transcription' to the actual column name if it's different in your data.

text_column = 'transcription'  # or 'description' or 'text', etc.

# Create new columns matching the disease_df columns for each record
mtsamples_df['Fever'] = 0
mtsamples_df['Cough'] = 0
mtsamples_df['Fatigue'] = 0
mtsamples_df['Difficulty Breathing'] = 0
mtsamples_df['Age'] = None
mtsamples_df['Gender'] = None
mtsamples_df['Blood Pressure'] = None
mtsamples_df['Cholesterol Level'] = None

# Iterate over each row in mtsamples_df
for i, row in mtsamples_df.iterrows():
    # Extract the transcription text
    text = str(row[text_column])

    # 1) Detect symptoms
    symptom_results = detect_symptoms(text, symptom_synonyms, negation_triggers)
    mtsamples_df.at[i, 'Fever'] = symptom_results['Fever']
    mtsamples_df.at[i, 'Cough'] = symptom_results['Cough']
    mtsamples_df.at[i, 'Fatigue'] = symptom_results['Fatigue']
    mtsamples_df.at[i, 'Difficulty Breathing'] = symptom_results['Difficulty Breathing']

    # 2) Parse age
    age_val = parse_age(text)
    mtsamples_df.at[i, 'Age'] = age_val

    # 3) Parse gender
    gender_val = parse_gender(text)
    mtsamples_df.at[i, 'Gender'] = gender_val

    # 4) Parse blood pressure
    bp_val = parse_blood_pressure(text)
    mtsamples_df.at[i, 'Blood Pressure'] = bp_val

    # 5) Parse cholesterol
    chol_val = parse_cholesterol(text)
    mtsamples_df.at[i, 'Cholesterol Level'] = chol_val

# Print a sample to see if it worked
mtsamples_df.head(10)

# List of relevant columns
selected_columns = [
    'transcription',           # or change this to match the actual text column name
    'Fever',
    'Cough',
    'Fatigue',
    'Difficulty Breathing',
    'Age',
    'Gender',
    'Blood Pressure',
    'Cholesterol Level'
]

# Extract subset of the DataFrame
extracted_df = mtsamples_df[selected_columns]

# Show the first few rows
extracted_df.head(30)















